"""
Variable names 3.
"""


# Пункт 7.1. Приведите пять примеров правильного именования булевых переменных в вашем коде в формате "было - стало".

empty_set - is_empty_set
# Признак, что множество пустое

need_remove - is_need_to_removing   
# Признак, что нужно продолжить удаление (не была выдана ошибка, что значение отсутствует)

stream - is_stream_in_line
# True, если в строке встретился поток (stream)

obj_now - is_inside_obj_block
# Признак, что сейчас находимся между obj и endobj: будет True после прочтения obj и вернется в False после endobj

file_exist - is_file_exist
# Признак, что файл найден


# Пункт 7.2. Найдите несколько подходящих случаев, когда в вашем коде можно использовать типичные имена булевых переменных.
        
something_found - found
# Признак, что хотя бы одно значение было найдено

need_remove - done
# Признак, что нужно продолжить удаление (не была выдана ошибка, что значение отсутствует)
# При переходе к done логика меняется на обратную. Будет цикл не "while need_remove:", а "while not done:"


# Пункт 7.3. Проверьте, правильно ли вы даёте имена индексам циклов. Попробуйте найти случай, когда вместо i j k нагляднее использовать более выразительное имя.

i - row_number
# Номер строки для цикла переборки excel листа по строкам "for i, row in enumerate(ws.rows):"

i - line_number
# Номер строки для цикла переборки csv файла по строкам "for i, line in enumerate(reader):"


# Пункт 7.4. Попробуйте найти в своих решениях два-три случая, когда можно использовать пары имён - антонимы.

# Пример 1.
pos_begin - position_beginning_text
# Позиция начала текста в строке
pos_end - position_end_text
# Позиция конца текста в строке (скобки после текста)

# Пример 2.
from_date
# Начало действия услуги agprior
to_date
# Конец действия услуги agprior


# Пункт 7.5. Всем ли временным переменным в вашем коде присвоены выразительные имена? Найдите несколько случаев, когда временные переменные надо переименовать, и поищите, возможно, от некоторых временных переменных вам получится вообще полностью избавиться.

# Пример 1.
delnode = node
node = node.next
del (delnode)
# Упорядоченный список, метод clean.
# delnode - переменная для временного хранения node (чтобы перейти на следующий элемент, а текущий удалить)
delnode - node_to_delete

# Пример 2.
line_with_obj = pdfrw_read(f)
decoding_line = stream_decoding(line_with_obj)
agprior_line = agprior_searching(decoding_line)
# ...
for line in agprior_line:
# Парсинг pdf. Последовательные вызовы генераторных функции можно собрать воедино.
# Тем самым убираем временные переменные: line_with_obj, decoding_line, agprior_line
for line in agprior_searching(stream_decoding(pdfrw_read(f))):
